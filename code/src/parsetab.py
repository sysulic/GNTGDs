
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'atomsCOMMA CONS CONSTANT DOT NAF NEG PARAM_CLOSE PARAM_OPEN SEMICOLON STRING VARIABLEidentifier : CONSTANT\n                  | VARIABLEconstant_term : CONSTANT\n                     | STRINGvariable_term : VARIABLEterms : term\n             | terms COMMA termterm : variable_term\n            | constant_term\n            | identifier PARAM_OPEN terms PARAM_CLOSEatom : identifier PARAM_OPEN terms PARAM_CLOSEatoms : atom\n             | atoms atomclassic_literal : atom\n                       | NEG atomnaf_literal : NAF classic_literal\n                   | classic_literalconjunction : naf_literal\n                   | conjunction COMMA naf_literaldisjunction : atom\n                   | disjunction SEMICOLON atombody : conjunctionhead : conjunctionrule : head CONS body DOTrule : atom DOTrule : CONS body DOTrules : rule\n             | rules ruleprogram : rules'
    
_lr_action_items = {'CONSTANT':([0,1,2,6,7,16,17,18,],[4,4,-12,-13,14,14,-11,14,]),'VARIABLE':([0,1,2,6,7,16,17,18,],[5,5,-12,-13,13,13,-11,13,]),'$end':([1,2,6,17,],[0,-12,-13,-11,]),'PARAM_OPEN':([3,4,5,8,13,14,],[7,-1,-2,16,-2,-1,]),'STRING':([7,16,18,],[15,15,15,]),'PARAM_CLOSE':([9,10,11,12,13,14,15,19,20,21,],[17,-6,-8,-9,-5,-3,-4,21,-7,-10,]),'COMMA':([9,10,11,12,13,14,15,19,20,21,],[18,-6,-8,-9,-5,-3,-4,18,-7,-10,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'atoms':([0,],[1,]),'atom':([0,1,],[2,6,]),'identifier':([0,1,7,16,18,],[3,3,8,8,8,]),'terms':([7,16,],[9,19,]),'term':([7,16,18,],[10,10,20,]),'variable_term':([7,16,18,],[11,11,11,]),'constant_term':([7,16,18,],[12,12,12,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> atoms","S'",1,None,None,None),
  ('identifier -> CONSTANT','identifier',1,'p_identifier','parser.py',53),
  ('identifier -> VARIABLE','identifier',1,'p_identifier','parser.py',54),
  ('constant_term -> CONSTANT','constant_term',1,'p_constant_term','parser.py',58),
  ('constant_term -> STRING','constant_term',1,'p_constant_term','parser.py',59),
  ('variable_term -> VARIABLE','variable_term',1,'p_variable_term','parser.py',63),
  ('terms -> term','terms',1,'p_terms','parser.py',67),
  ('terms -> terms COMMA term','terms',3,'p_terms','parser.py',68),
  ('term -> variable_term','term',1,'p_term','parser.py',75),
  ('term -> constant_term','term',1,'p_term','parser.py',76),
  ('term -> identifier PARAM_OPEN terms PARAM_CLOSE','term',4,'p_term','parser.py',77),
  ('atom -> identifier PARAM_OPEN terms PARAM_CLOSE','atom',4,'p_atom','parser.py',84),
  ('atoms -> atom','atoms',1,'p_atoms','parser.py',88),
  ('atoms -> atoms atom','atoms',2,'p_atoms','parser.py',89),
  ('classic_literal -> atom','classic_literal',1,'p_classic_literal','parser.py',96),
  ('classic_literal -> NEG atom','classic_literal',2,'p_classic_literal','parser.py',97),
  ('naf_literal -> NAF classic_literal','naf_literal',2,'p_naf_literal','parser.py',105),
  ('naf_literal -> classic_literal','naf_literal',1,'p_naf_literal','parser.py',106),
  ('conjunction -> naf_literal','conjunction',1,'p_conjunction','parser.py',114),
  ('conjunction -> conjunction COMMA naf_literal','conjunction',3,'p_conjunction','parser.py',115),
  ('disjunction -> atom','disjunction',1,'p_disjunction','parser.py',122),
  ('disjunction -> disjunction SEMICOLON atom','disjunction',3,'p_disjunction','parser.py',123),
  ('body -> conjunction','body',1,'p_body','parser.py',130),
  ('head -> conjunction','head',1,'p_head','parser.py',134),
  ('rule -> head CONS body DOT','rule',4,'p_rule','parser.py',138),
  ('rule -> atom DOT','rule',2,'p_fact','parser.py',142),
  ('rule -> CONS body DOT','rule',3,'p_constraint','parser.py',146),
  ('rules -> rule','rules',1,'p_rules','parser.py',150),
  ('rules -> rules rule','rules',2,'p_rules','parser.py',151),
  ('program -> rules','program',1,'p_program','parser.py',158),
]
